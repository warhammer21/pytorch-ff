name: Flask CI/CD Pipeline with Canary Deployment

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: flask-app
  IMAGE_TAG: canary-deployment-${{ github.sha }}
  REGISTRY: docker.io

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG .
          docker images

      - name: Push Docker Image
        run: docker push $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG

      - name: Run Flask Docker Container
        run: |
          docker run -d --name flask_container -p 7011:7000 $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG

      - name: Install Locust
        run: pip install locust

      - name: Wait for Flask API to be Ready
        run: |
          for i in {1..10}; do
            curl -f http://localhost:7011/health && break || sleep 3
          done

      - name: Test Flask API before Load Test
        run: |
          curl -f http://localhost:7011/health || (docker logs flask_container && exit 1)

      - name: Run Locust Load Tests
        run: |
          locust -f locustfile.py --headless --users 10 --spawn-rate 2 --run-time 30s --host=http://localhost:7011

      - name: Stop Flask Docker Container
        run: docker stop flask_container

  model-health-check:
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull Docker Image
        run: docker pull $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG
      - name: List Files in Current Directory
        run: ls -lah $PWD

      - name: List Files in App Directory
        run: ls -lah $PWD/app

      - name: Install ONNX Runtime
        run: pip install onnxruntime

      - name: Validate ONNX Model
        run: |
          #docker run --rm -v $PWD/app:/app warhammer21/flask-app:canary-deployment-9bd50c5a4ab458c4086b9f0434bec85ed26134dc python /app/validate_onnx.py
          docker run --rm -v $PWD/app:/app $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG python /app/validate_onnx.py || exit 1
  tag-and-push-stable:

    runs-on: ubuntu-latest
    needs: model-health-check
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull Canary Image
        run: docker pull $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG

      - name: Tag as Stable
        run: docker tag $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:stable

      - name: Push Stable Image
        run: docker push $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:stable


  canary-deployment:
    runs-on: ubuntu-latest
    needs: tag-and-push-stable

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull Docker Images
        run: |
          docker pull $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG
          docker pull $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:stable  # OLD Model

      - name: Run Old (Stable) Version
        run: docker run -d --name flask_old -p 7011:7000 $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:stable

      - name: Run New (Canary) Version
        run: docker run -d --name flask_canary -p 7012:7000 $REGISTRY/${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG

      - name: Run NGINX for Traffic Splitting
        run: |
          docker run -d --name nginx_lb -p 80:80 -v $PWD/nginx.conf:/etc/nginx/nginx.conf nginx

      - name: Gradually Shift Traffic to Canary
        run: |
          for weight in 10 25 50 75 100; do
            echo "Shifting traffic: $weight% to Canary..."
            sed -i "s/weight=[0-9]\+/weight=$weight/" nginx.conf
            docker restart nginx_lb
            sleep 10  # Wait for monitoring
          done

      - name: Monitor Errors & Rollback if Necessary
        run: |
          ERROR_COUNT=$(curl -sf http://localhost/health | jq '.error_rate // 0')

          # Fallback if empty or not a number
          if ! [[ "$ERROR_COUNT" =~ ^[0-9]+$ ]]; then
            echo "Invalid or missing error_rate. Assuming 0."
            ERROR_COUNT=0
          fi

          if [ "$ERROR_COUNT" -gt 5 ]; then
            echo "Error rate too high! Rolling back..."
            sed -i "s/weight=[0-9]\+/weight=100/" nginx.conf
            docker restart nginx_lb
            exit 1
          else
            echo "Canary looks healthy. Continuing..."
          fi

